#version 330 core


// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ


// Inputs
in vec3 v_color;         // vertex color: also diffuse color

in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space
// Length of lightVector is the distance between light and vertex
// if w = 1: Point light, if w = 0: directional light

// Ouput data
out vec3 color;


void main()
{
    // Implment Phong Shading based on the parameters above
    // Remember that directional light don't have attenuation

    // Ambient
    float Ka = materialCoefficients.x;
    vec3 ambient = Ka * lightColor; // Questionable

    float fAttenuation = 1;
    // Diffuse
    if (lightVector.w == 1){ // Point light
        float d = length(lightVector);
        fAttenuation = 1.0 / (lightAttenuation.x + lightAttenuation.y * d + lightAttenuation.z * pow(d,2));
    }

    float NL = max(dot(normalize(normal),vec3(normalize(lightVector))),0.0); // In case the  dot product is negative we cap it a 0
    float Kd = materialCoefficients.y;

    vec3 diffuse = NL * Kd * fAttenuation * lightColor;

    //Specular
    float Ks = materialCoefficients.z;
    vec3 R = reflect(-(normalize(lightVector.xyz)), normalize(normal));
    float nShiny = materialCoefficients.w;
    float RV = pow(max(dot(normalize(R),eyeVector),0.0),nShiny);
    vec3 specular = RV * Ks * fAttenuation * lightColor;

    color = v_color * (ambient + diffuse + specular);
}
